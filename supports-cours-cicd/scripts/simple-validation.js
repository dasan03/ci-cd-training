console.log('=== VALIDATION DES SUPPORTS DE COURS CI/CD ===\n');

const fs = require('fs');
const path = require('path');

const basePath = path.join(__dirname, '..');
console.log('Chemin de base:', basePath);

// 1. V√©rification de la structure de base
console.log('\n1. V√âRIFICATION DE LA STRUCTURE:');
const requiredDirs = ['modules', 'exercices', 'evaluations', 'guides', 'ressources'];
let structureOK = true;

requiredDirs.forEach(dir => {
    const dirPath = path.join(basePath, dir);
    if (fs.existsSync(dirPath)) {
        console.log(`‚úÖ ${dir} - OK`);
    } else {
        console.log(`‚ùå ${dir} - MANQUANT`);
        structureOK = false;
    }
});

// 2. V√©rification des modules
console.log('\n2. V√âRIFICATION DES MODULES:');
const modules = ['module-1-fondamentaux', 'module-2-ia-tests', 'module-3-tests-fonctionnels', 'module-4-documentation'];
let modulesOK = true;

modules.forEach(module => {
    const modulePath = path.join(basePath, 'modules', module);
    const readmePath = path.join(modulePath, 'README.md');
    
    if (fs.existsSync(readmePath)) {
        const content = fs.readFileSync(readmePath, 'utf8');
        const wordCount = content.split(' ').length;
        console.log(`‚úÖ ${module} - ${wordCount} mots`);
    } else {
        console.log(`‚ùå ${module} - README manquant`);
        modulesOK = false;
    }
});

// 3. V√©rification des exercices
console.log('\n3. V√âRIFICATION DES EXERCICES:');
let exercisesOK = true;
const exercisesPath = path.join(basePath, 'exercices');

if (fs.existsSync(exercisesPath)) {
    const moduleExercises = fs.readdirSync(exercisesPath).filter(item => 
        fs.statSync(path.join(exercisesPath, item)).isDirectory()
    );
    
    moduleExercises.forEach(moduleDir => {
        const modulePath = path.join(exercisesPath, moduleDir);
        const exercises = fs.readdirSync(modulePath).filter(item => 
            fs.statSync(path.join(modulePath, item)).isDirectory()
        );
        console.log(`‚úÖ ${moduleDir} - ${exercises.length} exercices`);
    });
} else {
    console.log('‚ùå Dossier exercices manquant');
    exercisesOK = false;
}

// 4. V√©rification des QCM
console.log('\n4. V√âRIFICATION DES QCM:');
let qcmOK = true;
const evaluationsPath = path.join(basePath, 'evaluations');

if (fs.existsSync(evaluationsPath)) {
    const qcmIntermediaires = path.join(evaluationsPath, 'qcm-intermediaires');
    const qcmFinal = path.join(evaluationsPath, 'qcm-final');
    
    if (fs.existsSync(qcmIntermediaires)) {
        const qcmFiles = fs.readdirSync(qcmIntermediaires).filter(f => f.endsWith('.md'));
        console.log(`‚úÖ QCM interm√©diaires - ${qcmFiles.length} fichiers`);
    } else {
        console.log('‚ùå QCM interm√©diaires manquants');
        qcmOK = false;
    }
    
    if (fs.existsSync(qcmFinal)) {
        const qcmFiles = fs.readdirSync(qcmFinal).filter(f => f.endsWith('.md'));
        console.log(`‚úÖ QCM final - ${qcmFiles.length} fichiers`);
    } else {
        console.log('‚ùå QCM final manquant');
        qcmOK = false;
    }
} else {
    console.log('‚ùå Dossier evaluations manquant');
    qcmOK = false;
}

// 5. V√©rification des guides
console.log('\n5. V√âRIFICATION DES GUIDES:');
let guidesOK = true;
const guidesPath = path.join(basePath, 'guides');

['guide-formateur.md', 'guide-apprenant.md'].forEach(guide => {
    const guidePath = path.join(guidesPath, guide);
    if (fs.existsSync(guidePath)) {
        const content = fs.readFileSync(guidePath, 'utf8');
        const wordCount = content.split(' ').length;
        console.log(`‚úÖ ${guide} - ${wordCount} mots`);
    } else {
        console.log(`‚ùå ${guide} - manquant`);
        guidesOK = false;
    }
});

// 6. V√©rification des formats de sortie
console.log('\n6. V√âRIFICATION DES FORMATS DE SORTIE:');
let formatsOK = true;

const htmlPath = path.join(basePath, 'html-output');
if (fs.existsSync(htmlPath)) {
    console.log('‚úÖ Format HTML disponible');
} else {
    console.log('‚ö†Ô∏è  Format HTML manquant');
}

const pdfPath = path.join(basePath, 'pdf-exports');
if (fs.existsSync(pdfPath)) {
    console.log('‚úÖ Exports PDF disponibles');
} else {
    console.log('‚ö†Ô∏è  Exports PDF manquants');
}

// R√©sum√© final
console.log('\n=== R√âSUM√â DE LA VALIDATION ===');
const allOK = structureOK && modulesOK && exercisesOK && qcmOK && guidesOK;

if (allOK) {
    console.log('üéâ VALIDATION R√âUSSIE - Tous les √©l√©ments essentiels sont pr√©sents');
} else {
    console.log('‚ö†Ô∏è  VALIDATION PARTIELLE - Certains √©l√©ments n√©cessitent attention');
}

console.log('\nD√©tails:');
console.log(`- Structure: ${structureOK ? '‚úÖ' : '‚ùå'}`);
console.log(`- Modules: ${modulesOK ? '‚úÖ' : '‚ùå'}`);
console.log(`- Exercices: ${exercisesOK ? '‚úÖ' : '‚ùå'}`);
console.log(`- QCM: ${qcmOK ? '‚úÖ' : '‚ùå'}`);
console.log(`- Guides: ${guidesOK ? '‚úÖ' : '‚ùå'}`);

// Recommandations
console.log('\n=== RECOMMANDATIONS ===');
console.log('1. Tester manuellement tous les exercices');
console.log('2. V√©rifier la coh√©rence p√©dagogique entre modules');
console.log('3. Valider l\'accessibilit√© des formats HTML');
console.log('4. Faire r√©viser le contenu par un expert m√©tier');
console.log('5. Tester les QCM avec des apprenants pilotes');

process.exit(allOK ? 0 : 1);